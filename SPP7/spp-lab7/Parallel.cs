
using System.Threading;

namespace spp_lab7
{
    public class Parallel
    {
        public static void WaitAll(WaitCallback[] tasks)
        {
            foreach (var task in tasks)
            {
                ThreadPool.QueueUserWorkItem(task); //QUWI ставит в очередь делегат на выполнение
            }

            bool readyToStop;
            do
            {
                ThreadPool.GetMaxThreads(out int mWorkers, out int mIoThreads);
                ThreadPool.GetAvailableThreads(out int aWorkers, out int aIoThreads);
                readyToStop = mWorkers == aWorkers;
            } while (!readyToStop);
        }
    }
}

















/*
 * —татистические пол€, методы, свойства относ€тс€ ко всему классу в котором определены
и дл€ обраени€ к подобным членам класса необ€зательно создавать экземпл€р класса.
—татическа€ сущность принадлежит не конкретному объекту класса, а всему классу, 
как типу данных
ƒл€ вызова статического метода не нужен объект.
¬нутри статического метода недоступна переменна€ "this", соответственно недоступны все нестатические пол€ этого класса, т.к. как нет объекта.
¬нутри обычного метода доступны как статические, так и нестатические пол€.


GetMaxThreads - »звлекает количество запросов к пулу потоков, которые могут 
быть активными одновременно. ¬се запросы выше этого числа остаютс€ в очереди до тех пор, 
пока потоки пула потоков не станут доступными.
mWorkers - ћаксимальное количество рабочих потоков в пуле потоков.
M/AioThreads -  оличество доступных потоков асинхронного ввода-вывода.
GetAvailableThreads - »звлекает разницу между максимальным количеством потоков пула потоков, 
возвращаемых методом GetMaxThreads (Int32, Int32) , и текущим активным числом.
aWorkers -  оличество доступных рабочих потоков.
*/